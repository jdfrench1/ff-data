name: Load Weekly NFL Data

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Season year (e.g., 2024)"
        required: false
        default: "2024"
      week:
        description: "Week number (leave blank for all)"
        required: false
        default: ""
      allow_empty:
        description: "Succeed with empty CSV if data not yet published"
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '0 10 * * TUE'

jobs:
  load:
    runs-on: [self-hosted, windows, local]
    env:
      # Expose DB secrets as env so we can reference them in `if:` expressions
      PGHOST: ${{ secrets.PGHOST }}
      PGPORT: ${{ secrets.PGPORT }}
      PGUSER: ${{ secrets.PGUSER }}
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      PGDATABASE: ${{ secrets.PGDATABASE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Check data library availability
        shell: pwsh
        run: |
          python -V
          $scriptLines = @(
            "import importlib",
            "",
            "for mod in ('nflreadpy', 'nfl_data_py'):",
            "    try:",
            "        m = importlib.import_module(mod)",
            "        ver = getattr(m, '__version__', '(no __version__)')",
            "        print(f'{mod} version: {ver}')",
            "    except Exception as exc:",
            "        print(f'{mod} not importable: {exc}')"
          )
          $temp = New-TemporaryFile
          Set-Content -Path $temp -Value $scriptLines
          python $temp
          Remove-Item $temp

      - name: Run weekly loader
        shell: pwsh
        run: |
          $argsList = @()
          if (![string]::IsNullOrEmpty("${{ inputs.season }}")) { $argsList += '--season'; $argsList += '${{ inputs.season }}' }
          if (![string]::IsNullOrEmpty("${{ inputs.week }}"))   { $argsList += '--week';   $argsList += '${{ inputs.week }}' }
          if ('${{ github.event_name }}' -eq 'schedule' -or '${{ inputs.allow_empty }}' -eq 'true') { $argsList += '--allow-empty' }
          $argsList += '--verbose'
          python scripts/load_weekly_data.py @argsList --output nfl_weekly_stats.csv

      - name: Upload CSV artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: nfl-weekly-stats
          path: nfl_weekly_stats.csv

      - name: Load CSV into Postgres (optional)
        if: ${{ success() && env.PGHOST && env.PGUSER && env.PGDATABASE }}
        shell: pwsh
        run: |
          $scriptLines = @(
            "import os",
            "import sys",
            "import pandas as pd",
            "from sqlalchemy import create_engine",
            "",
            "csv_path = 'nfl_weekly_stats.csv'",
            "if not os.path.exists(csv_path):",
            "    print(f'CSV not found: {csv_path}')",
            "    sys.exit(1)",
            "",
            "user = os.environ['PGUSER']",
            "pwd = os.environ['PGPASSWORD']",
            "host = os.environ['PGHOST']",
            "port = os.environ.get('PGPORT', '5432')",
            "db = os.environ['PGDATABASE']",
            "",
            "try:",
            "    import psycopg  # noqa: F401",
            "    driver = 'psycopg'",
            "except ImportError:",
            "    driver = 'psycopg2'",
            "",
            "url = f'postgresql+{driver}://{user}:{pwd}@{host}:{port}/{db}'",
            "engine = create_engine(url)",
            "",
            "df = pd.read_csv(csv_path)",
            "df.to_sql('nfl_weekly_stats', engine, if_exists='append', index=False)",
            "print('Loaded CSV into Postgres table nfl_weekly_stats')"
          )
          $temp = New-TemporaryFile
          Set-Content -Path $temp -Value $scriptLines
          python $temp
          Remove-Item $temp
